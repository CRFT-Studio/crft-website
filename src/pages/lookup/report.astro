---
export const prerender = false;

import HeadScripts from "../../components/HeadScripts.astro";
import Navigation from "../../components/Navigation.astro";
import Footer from "../../components/Footer.astro";
import Lighthouse from "../../components/Lighthouse.astro";
import Sitemap from "../../components/Sitemap.astro";
import Wappalyzer from "../../components/Wappalyzer.astro";
import LookupCard from "../../components/LookupCard.astro";
import FAQItem from "../../components/FAQItem.astro";
import LookupMarquee from "../../components/LookupMarquee.astro";
import LookupFeatures from "../../components/LookupFeatures.astro";

import { Image } from 'astro:assets';
import NickPFP from '../../images/nick-pfp-new.png';

const url = Astro.url.searchParams.get("url");
const datetime = Astro.url.searchParams.get("datetime");

// Set cache headers based on parameters
if (url && datetime) {
  Astro.response.headers.set('Cache-Control', 'public, max-age=2592000, stale-while-revalidate=86400');
  Astro.response.headers.set('Vercel-CDN-Cache-Control', 'max-age=2592000');
} else {
  Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
}

import ogs from 'open-graph-scraper';
import LookupCTA from "../../components/LookupCTA.astro";

let ogTitle = '', ogImageUrl = '', ogDescription = '';

let desktopReport = null;
let mobileReport = null;
let techByCategory = {};

if (url) {
    try {
        const {result} = await ogs({url: url});
        ogTitle = result.ogTitle;
        ogImageUrl = result.ogImage?.[0]?.url;
        if (ogImageUrl?.startsWith('/')) {
            ogImageUrl = new URL(ogImageUrl, url).toString();
        }
        ogDescription = result.ogDescription;
    } catch (error) {
        console.error("Error fetching metadata:", error);
    }

    // New: Parallelize Lighthouse and Wappalyzer

    try {
        const PAGESPEED_API = import.meta.env.PAGESPEED_API;
        const encodedUrl = encodeURIComponent(url);

        const wappalyzerServiceUrl = import.meta.env.WAPPALYZER_URL;
        const wappalyzerApiKey = import.meta.env.WAPPALYZER_API;

        const [desktopResponse, mobileResponse, wappalyzerResponse] = await Promise.all([
            fetch(
                `https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${encodedUrl}&category=performance&category=best-practices&category=seo&category=accessibility&strategy=desktop&locale=en&key=${PAGESPEED_API}`
            ),
            fetch(
                `https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${encodedUrl}&category=performance&category=best-practices&category=seo&category=accessibility&strategy=mobile&locale=en&key=${PAGESPEED_API}`
            ),
            fetch(wappalyzerServiceUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-API-Key': wappalyzerApiKey
                },
                body: JSON.stringify({
                    url,
                    options: {}
                })
            })
        ]);

        // Process Lighthouse
        if (desktopResponse.ok) {
            desktopReport = await desktopResponse.json();
        } else {
            console.error(`Desktop API response not OK. Status: ${desktopResponse.status}`);
        }
        if (mobileResponse.ok) {
            mobileReport = await mobileResponse.json();
        } else {
            console.error(`Mobile API response not OK. Status: ${mobileResponse.status}`);
        }

        // Process Wappalyzer
        if (wappalyzerResponse.ok) {
            const results = await wappalyzerResponse.json();
            techByCategory = results.technologies.reduce((acc, tech) => {
                if (tech.categories) {
                    tech.categories.forEach(cat => {
                        if (!acc[cat.name]) acc[cat.name] = [];
                        acc[cat.name].push({
                            name: tech.name,
                            description: tech.description,
                            website: tech.website,
                            icon: tech.icon,
                        });
                    });
                }
                return acc;
            }, {});
        } else {
            console.error(`Wappalyzer API response not OK. Status: ${wappalyzerResponse.status}`);
        }

    } catch (error) {
        console.error("Error during parallel fetches:", error);
    }
};
---
<html lang="en">
    <head>
        <HeadScripts
        title="CRFT Lookup: Analyze A Website's Technologies, Pagespeed, Sitemap and Meta Tags"
        description="Discover the tech stack, pagespeed, sitemap and meta tags of any website you're curious about. Get insights to improve your website's performance and SEO."
        ogImageUrl="https://www.crft.studio/lookup-open-graph.png"
        />

        <script>
            import $ from 'jquery';

            // When window fully loads, enable scrolling and fade out overlay
            $(window).on("load", function() {
                const { url, datetime } = Object.fromEntries(new URLSearchParams(window.location.search));

                if (!url || !datetime) {
                    $('body').removeClass("overflow-hidden h-full");
                    return;
                }

                $("#loadingOverlay").fadeOut(500, () => {
                    $('body').toggleClass("overflow-hidden h-full");
                });
            });

            const moveTocOnMobile = () => {
                if ($(window).width() < 1024) {
                    $("#toc").prependTo("#result");
                    $("#toc").removeClass("hidden sticky").addClass("flex");
                    $("#lighthouse-overview").prependTo("#mobile-lighthouse");
                } else {
                    $("#toc").prependTo("#sidebar");
                    $("#toc").removeClass("flex").addClass("hidden sticky");
                    $("#lighthouse-overview").prependTo("#right-sidebar");
                }
            };

            $(document).ready(moveTocOnMobile);
            $(window).resize(moveTocOnMobile);

            $(document).ready(function () {
                $("#metaTitle").on("input", () => {
                    $("#titleLength").text($("#metaTitle").val().length);
                    $(".meta-title-preview").text($("#metaTitle").val());
                });
                $("#metaDescription").on("input", () => {
                    $("#descriptionLength").text($("#metaDescription").val().length);
                    $(".meta-description-preview").text($("#metaDescription").val());
                });

                let userHasTyped = false;

                $("#search").on("focus", function() {
                    if (!$(this).val()) {
                        $(this).val("https://");
                    }
                }).on("blur", function() {
                    if ($(this).val() === "https://") {
                        $(this).val("");
                    }
                }).on("input", function() {
                    let value = $(this).val();
                    if (value.toLowerCase().startsWith("https://https://")) {
                        value = value.replace(/^https:\/\/https:\/\//i, "https://");
                        $(this).val(value);
                    }
                });

                const sampleUrls = [
                  "https://linear.app",
                  "https://stripe.com",
                  "https://basecamp.com",
                  "https://posthog.com",
                  "https://www.crft.studio"
                ];

                $("#randomReport").on("click", function(e) {
                  e.preventDefault();

                  const randomUrl = sampleUrls[Math.floor(Math.random() * sampleUrls.length)];

                  $("#search").val(randomUrl);
                  $("#search").closest("form").submit();
                });

                $(document).ready(function () {
                    const $share = $('#share');
                    const $shareDialog = $('#shareDialog');
                    const pageUrl = window.location.href;
                    const pageTitle = document.title;

                    // Toggle share dialog on #share click
                    $share.on('click', function (e) {
                        e.stopPropagation();
                        $shareDialog.toggleClass('hidden flex');
                    });

                    // Hide dialog when clicking outside
                    $(document).on('click', function (e) {
                        if ($shareDialog.hasClass('flex')) {
                            if (!$(e.target).closest('#share, #shareDialog').length) {
                                $shareDialog.removeClass('flex').addClass('hidden');
                            }
                        }
                    });

                    // Share links
                    const shareLinks = {
                        x: `https://x.com/share?url=${encodeURIComponent(pageUrl)}&text=${encodeURIComponent(pageTitle)}`,
                        reddit: `https://www.reddit.com/submit?url=${encodeURIComponent(pageUrl)}&title=${encodeURIComponent(pageTitle)}`,
                        linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(pageUrl)}`,
                        facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(pageUrl)}`,
                        email: `mailto:?subject=${encodeURIComponent(pageTitle)}&body=${encodeURIComponent(pageUrl)}`
                    };

                    $('#x, #reddit, #linkedin, #facebook, #email').on('click', function (e) {
                        e.stopPropagation();
                        const id = $(this).attr('id');
                        if (shareLinks[id]) {
                            window.open(shareLinks[id], '_blank', 'noopener,noreferrer');
                        }
                    });

                    // Copy Link button logic
                    $('#link').on('click', function(e) {
                        e.stopPropagation();
                        navigator.clipboard.writeText(pageUrl).then(function() {
                            $('#link #link-icon').addClass('hidden');
                            $('#link #check-icon').removeClass('hidden');
                            setTimeout(function() {
                                $('#link #link-icon').removeClass('hidden');
                                $('#link #check-icon').addClass('hidden');
                            }, 2000);
                        });
                    });

                    // Copy Embed button logic
                    $('#embed').on('click', function(e) {
                        e.stopPropagation();
                        const embedCode = `<iframe src="${pageUrl}" width="560" height="315" frameborder="0" allowfullscreen></iframe>`;
                        navigator.clipboard.writeText(embedCode).then(function() {
                            $('#embed svg').first().addClass('hidden');
                            $('#embed #check-icon').removeClass('hidden');
                            setTimeout(function() {
                                $('#embed svg').first().removeClass('hidden');
                                $('#embed #check-icon').addClass('hidden');
                            }, 2000);
                        });
                    });
                });

                $('#downloadReport').on('click', async function (e) {
                    e.preventDefault();

                    // Clone the document to avoid modifying the original
                    const documentClone = document.cloneNode(true);

                    // === 1. CSS INLINING & FONT DATA-URL REWRITE ===
                    const linkElements = documentClone.querySelectorAll('link[rel="stylesheet"][href]');
                    for (const link of linkElements) {
                        const href = link.getAttribute('href');
                        if (href) {
                            try {
                                const absoluteUrl = new URL(href, document.baseURI).href;
                                const response = await fetch(absoluteUrl);
                                if (response.ok) {
                                    let cssContent = await response.text();

                                    // --- Inline referenced fonts in CSS (@font-face { src: url('...') })
                                    // This fetches fonts, converts to data URL, and rewrites CSS font-face URLs
                                    const fontRegex = /@font-face\s*{[^}]*src:\s*([^;}]+);[^}]*}/gi;
                                    const urlRegex = /url\(([^)]+)\)/g;

                                    let fontMatch;
                                    let replacements = [];
                                    while ((fontMatch = fontRegex.exec(cssContent)) !== null) {
                                        let src = fontMatch[1];
                                        let urls = [];
                                        let match;
                                        while ((match = urlRegex.exec(src)) !== null) {
                                            let originalUrl = match[1].replace(/['"]/g, '').trim();
                                            if (!originalUrl.startsWith('data:')) {
                                                // Robustly resolve any relative URL, as before
                                                let fontAbsUrl = new URL(originalUrl, absoluteUrl).href;
                                                try {
                                                    const fontResp = await fetch(fontAbsUrl);
                                                    if (fontResp.ok) {
                                                        const fontBlob = await fontResp.blob();
                                                        const fontDataUrl = await new Promise(resolve => {
                                                            const reader = new FileReader();
                                                            reader.onloadend = () => resolve(reader.result);
                                                            reader.readAsDataURL(fontBlob);
                                                        });
                                                        urls.push({originalUrl, dataUrl: fontDataUrl});
                                                    }
                                                } catch (err) {
                                                    console.error('Error inlining font:', err);
                                                }
                                            }
                                        }
                                        // Save this block's replacements for later batch replace
                                        replacements.push({block: fontMatch[0], urls});
                                    }
                                    // Actually replace font URLs with inlined data
                                    for (const rep of replacements) {
                                        let newBlock = rep.block;
                                        for (const {originalUrl, dataUrl} of rep.urls) {
                                            newBlock = newBlock.replace(
                                                new RegExp(`url\\(['"]?${originalUrl}['"]?\\)`, 'g'),
                                                `url('${dataUrl}')`
                                            );
                                        }
                                        cssContent = cssContent.replace(rep.block, newBlock);
                                    }

                                    // --- End font handling
                                    const styleElement = documentClone.createElement('style');
                                    styleElement.textContent = cssContent;
                                    link.parentNode?.replaceChild(styleElement, link);
                                }
                            } catch (error) {
                                console.error('Error fetching CSS:', error);
                            }
                        }
                    }

                    // === 2. SCRIPT INLINING (optional) ===
                    const scriptElements = documentClone.querySelectorAll('script[type="module"][src]');
                    for (const script of scriptElements) {
                        const src = script.getAttribute('src');
                        if (src) {
                            try {
                                const absoluteUrl = new URL(src, document.baseURI).href;
                                const response = await fetch(absoluteUrl);
                                if (response.ok) {
                                    const scriptContent = await response.text();
                                    const scriptElement = documentClone.createElement('script');
                                    scriptElement.textContent = scriptContent;
                                    scriptElement.removeAttribute('type');
                                    scriptElement.removeAttribute('src');
                                    script.parentNode?.replaceChild(scriptElement, script);
                                }
                            } catch (error) {
                                console.error('Error fetching JavaScript:', error);
                            }
                        }
                    }

                    // === 3. IMAGE INLINING ===
                    const imgElements = documentClone.querySelectorAll('img[src]');
                    for (const img of imgElements) {
                        const src = img.getAttribute('src');
                        if (src && !src.startsWith('data:')) {
                            try {
                                const absoluteUrl = new URL(src, document.baseURI).href;
                                const response = await fetch(absoluteUrl);
                                if (response.ok) {
                                    const blob = await response.blob();
                                    const dataUrl = await new Promise(resolve => {
                                        const reader = new FileReader();
                                        reader.onloadend = () => resolve(reader.result);
                                        reader.readAsDataURL(blob);
                                    });
                                    img.setAttribute('src', dataUrl);
                                }
                            } catch (error) {
                                console.error('Error inlining image:', error);
                            }
                        }
                    }

                    // === 4. ADD JQUERY TO HEAD ===
                    const jQueryScript = documentClone.createElement('script');
                    jQueryScript.src = "https://code.jquery.com/jquery-3.7.1.min.js";
                    jQueryScript.setAttribute("integrity", "sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=");
                    jQueryScript.setAttribute("crossorigin", "anonymous");
                    documentClone.head.appendChild(jQueryScript);

                    // === 5. REMOVE UI ELEMENTS (#share, #downloadReport) ===
                    const shareElement = documentClone.getElementById('share');
                    if (shareElement) shareElement.remove();
                    const downloadReportElement = documentClone.getElementById('downloadReport');
                    if (downloadReportElement) downloadReportElement.remove();

                    // === 6. GENERATE HTML, DOWNLOAD ===
                    const htmlContent = '<!DOCTYPE html>\n' + documentClone.documentElement.outerHTML;
                    const blob = new Blob([htmlContent], { type: 'text/html' });
                    const url = URL.createObjectURL(blob);

                    const a = document.createElement('a');
                    a.href = url;
                    a.download = (document.title.replace(/\s+/g, '-').toLowerCase() || 'report') + '.html';
                    document.body.appendChild(a);
                    a.click();
                    setTimeout(() => {
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                    }, 100);
                });

                // Function to update layout based on window width
                const updateLayoutStyle = (element) => {
                    const displayStyle = $(window).width() < 1024 ? 'grid' : 'flex';
                    if ($(element).is(':visible')) {
                        $(element).css({
                            'display': displayStyle,
                            'grid-template-columns': displayStyle === 'grid' ? 'repeat(2, 1fr)' : 'none'
                        });
                    }
                };

                // Tab switching logic
                $("#overview-tabs div").click(function() {
                    if ($(this).hasClass("tab-active")) return;
                    $("#overview-tabs .tab-active").removeClass("tab-active");
                    $(this).addClass("tab-active");
                    const tabId = $(this).attr("id");

                    if (tabId === "desktop-overview-tab") {
                        $("#lighthouse-overview-desktop").removeAttr("hidden");
                        $("#lighthouse-overview-mobile").attr("hidden", "hidden");
                        updateLayoutStyle("#lighthouse-overview-desktop");
                    } else {
                        $("#lighthouse-overview-mobile").removeAttr("hidden");
                        $("#lighthouse-overview-desktop").attr("hidden", "hidden");
                        updateLayoutStyle("#lighthouse-overview-mobile");

                        // Force layout recalculation
                        const mobileContainer = document.querySelector("#lighthouse-overview-mobile");
                        if (mobileContainer) {
                            void mobileContainer.offsetHeight;
                        }
                    }
                });

                // Handle window resize
                $(window).resize(function() {
                    updateLayoutStyle("#lighthouse-overview-mobile");
                    updateLayoutStyle("#lighthouse-overview-desktop");
                });

                // Run on initial page load
                $(document).ready(function() {
                    updateLayoutStyle("#lighthouse-overview-mobile");
                    updateLayoutStyle("#lighthouse-overview-desktop");
                });
            });

            function getColorClasses(score) {
                if (score >= 90) return { bg: 'bg-green-600', text: 'text-green-600', lightBg: 'bg-green-300' };
                if (score >= 50) return { bg: 'bg-yellow-600', text: 'text-yellow-600', lightBg: 'bg-yellow-300' };
                return { bg: 'bg-red-600', text: 'text-red-600', lightBg: 'bg-red-300' };
            }

            const metrics = [
                { key: 'performance', label: 'Performance' },
                { key: 'accessibility', label: 'Accessibility' },
                { key: 'best-practices', label: 'Best Practices' },
                { key: 'seo', label: 'SEO' }
            ];

            function updateOverview(report, viewerId) {
                try {
                    const overview = $(`#${viewerId}`);
                    const cards = overview.find('.square-card');

                    metrics.forEach((metric, index) => {
                        const score = Math.round(report.categories[metric.key].score * 100);
                        const colors = getColorClasses(score);

                        const card = $(cards[index]);
                        card.find('div:first').removeClass().addClass(`${colors.bg} text-center`).text(metric.label);
                        card.find('div:last').removeClass().addClass(`text-center text-3xl ${colors.lightBg} ${colors.text} font-medium`).text(score);
                    });
                    console.log(`Updated ${viewerId} overview successfully`);
                } catch (error) {
                    console.error(`Error updating ${viewerId} overview:`, error);
                    const overview = $(`#${viewerId}`);
                    overview.html('<div class="text-neutral-300">Failed to update overview.</div>');
                }
            }

            // Track which reports have been processed
            const processedReports = {
                desktop: false,
                mobile: false
            };

            // Watch for the Lighthouse reports to be available
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'childList') {
                        if ($('#desktop-report').length && !processedReports.desktop) {
                            try {
                                const desktopData = JSON.parse($('#desktop-report').text());
                                updateOverview(desktopData, 'lighthouse-overview-desktop');
                                processedReports.desktop = true;
                                console.log('Desktop report processed');
                            } catch (parseError) {
                                console.error("Error parsing desktop report data in observer:", parseError);
                            }
                        }
                        if ($('#mobile-report').length && !processedReports.mobile) {
                            try {
                                const mobileData = JSON.parse($('#mobile-report').text());
                                updateOverview(mobileData, 'lighthouse-overview-mobile');
                                processedReports.mobile = true;
                                console.log('Mobile report processed');
                            } catch (parseError) {
                                console.error("Error parsing mobile report data in observer:", parseError);
                            }
                        }

                        // Disconnect observer once both reports are processed
                        if (processedReports.desktop && processedReports.mobile) {
                            observer.disconnect();
                            console.log('MutationObserver disconnected');

                            // Fade out the loading overlay once both reports are processed
                            console.log('Fading out overlay after Lighthouse overview updates');
                            $("#loadingOverlay").fadeOut(500, () => {
                                $('body').toggleClass("overflow-hidden h-full");
                                posthog.capture('report_loaded', {
                                    url: new URLSearchParams(window.location.search).get('url'),
                                    datetime: new URLSearchParams(window.location.search).get('datetime')
                                });
                            });
                        }
                    }
                });
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });

            //toc stuff below

            function initTOC() {
                const sections = ['overview', 'lighthouse', 'tech-stack', 'sitemap', 'meta-tags'];

                // Intersection Observer options
                const options = {
                    root: null,
                    rootMargin: "-20% 0px -70% 0px", // Adjust these values to control when sections become "active"
                    threshold: [0]
                };

                // Callback when intersection changes
                const callback = (entries) => {
                    entries.forEach(entry => {
                        const id = entry.target.getAttribute('id');
                        const menuItem = document.querySelector(`.toc-link[href="#${id}"]`);

                        if (entry.isIntersecting) {
                            document.querySelectorAll('.toc-link').forEach(link => {
                                link.classList.remove('toc-current');
                            });
                            menuItem?.classList.add('toc-current');
                        }
                    });
                };

                // Create observer
                const observer = new IntersectionObserver(callback, options);

                // Observe all sections
                sections.forEach(sectionId => {
                    const element = document.getElementById(sectionId);
                    if (element) {
                        observer.observe(element);
                    }
                });

                // Add smooth scrolling
                document.querySelectorAll('.toc-link').forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        const targetId = link.getAttribute('href');
                        document.querySelector(targetId)?.scrollIntoView({
                            behavior: 'smooth'
                        });
                    });
                });
            }

            // Initialize on page load
            if (document.readyState === 'complete') {
                initTOC();
            } else {
                window.addEventListener('load', initTOC);
            }

            // Initialize on view transitions
            document.addEventListener('astro:after-swap', initTOC);

            // Watch for Wappalyzer component to appear and generate overview
            document.addEventListener('DOMContentLoaded', () => {
                // First check if element already exists (unlikely but possible)
                generateTechOverview();

                // Set up MutationObserver to watch for the Wappalyzer component to appear
                const observer = new MutationObserver((mutations) => {
                    mutations.forEach((mutation) => {
                        if (mutation.type === 'childList' && mutation.addedNodes.length) {
                            // Check if our target element has been added
                            if (document.getElementById('wappalyzer-tech-data')) {
                                generateTechOverview();
                                observer.disconnect(); // Stop observing once we've found it
                            }
                        }
                    });
                });

                // Start observing the document body for changes
                observer.observe(document.body, { childList: true, subtree: true });
            });

            function generateTechOverview() {
                const wappalyzerData = document.getElementById('wappalyzer-tech-data');
                const overviewContainer = document.getElementById('tech-overview-container');

                if (!wappalyzerData || !overviewContainer) return;

                // Extract tech data from the rendered Wappalyzer component
                const importantCategories = ['CDN', 'JavaScript frameworks', 'CMS', 'Page builders'];
                const overviewHTML = document.createElement('div');
                overviewHTML.className = 'flex flex-row gap-8';

                // Find category elements that match our important categories
                let foundCategories = false;

                importantCategories.forEach(categoryName => {
                    const categoryElement = [...wappalyzerData.children].find(
                        el => el.getAttribute('data-category') === categoryName
                    );

                    if (categoryElement) {
                        foundCategories = true;

                        // Create category container
                        const categoryDiv = document.createElement('div');
                        categoryDiv.className = 'flex flex-col gap-2';

                        // Add category heading
                        const categoryHeading = document.createElement('h3');
                        categoryHeading.className = 'font-medium mb-4';
                        categoryHeading.textContent = categoryName;
                        categoryDiv.appendChild(categoryHeading);

                        // Create techs container
                        const techsContainer = document.createElement('div');
                        techsContainer.className = 'flex flex-col gap-4';

                        // Find all tech items in this category
                        const techItems = categoryElement.querySelectorAll('a[data-tech-name]');
                        techItems.forEach(techItem => {
                            const techDiv = document.createElement('div');
                            techDiv.className = 'flex flex-row gap-2';

                            const techName = techItem.getAttribute('data-tech-name');
                            const techIcon = techItem.getAttribute('data-tech-icon');

                            // Add icon
                            const imgElement = document.createElement('img');
                            imgElement.src = `/icons/${techIcon}`;
                            imgElement.className = 'w-5 h-5';
                            imgElement.alt = '';
                            techDiv.appendChild(imgElement);

                            // Add name
                            const nameElement = document.createElement('div');
                            nameElement.textContent = techName;
                            techDiv.appendChild(nameElement);

                            techsContainer.appendChild(techDiv);
                        });

                        categoryDiv.appendChild(techsContainer);
                        overviewHTML.appendChild(categoryDiv);
                    }
                });

                // Clear loading state and append the overview
                overviewContainer.innerHTML = '';

                if (!foundCategories) {
                    overviewHTML.innerHTML = '<div class="text-neutral-300">No key technology data available</div>';
                }

                overviewContainer.appendChild(overviewHTML);
            }
        </script>

        <style>
        @reference "../../styles/global.css";
            .toc-current {
                @apply text-orange-300;
            }

            #overview,
            #lighthouse,
            #tech-stack,
            #sitemap,
            #meta-tags {
                scroll-margin-top: 170px;
            }

            .toc-link {
                transition: color 0.2s ease-in-out;
            }

            .toc-link:hover {
                @apply text-orange-300;
            }

            #overview-tabs div {
                @apply border-transparent;
            }
            .tab-active {
                border-color: #525252 !important;
                @apply bg-neutral-700;
            }

            /* Ensure the hidden attribute works */
            [hidden] {
                display: none;
            }
        </style>
    </head>

    <body class="overflow-hidden w-full h-full">
        <Navigation/>
        <section class="lg:my-20 my-10">
                <div id="result" class="sticky top-[107px] lg:mt-6 -mt-20 z-20"></div>
                <div id="loadingOverlay" class="z-50 fixed bottom-0 h-[60vh] w-[100vw] bg-gradient-to-t from-black to-transparent transition-all flex flex-col items-center justify-end gap-5 pb-16">
                    <svg aria-hidden="true" class="w-6 h-6 text-gray-200 animate-[spin_0.5s_linear_infinite] dark:text-gray-600 fill-orange-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                    </svg>
                    <div class="text-xl">Generating report...</div>
                    <div class="text-lg text-neutral-300 -mt-3 lg:hidden">Do not leave this tab</div>
                </div>
                <div class="container lg:mt-5 mt-5 relative">
                    <div class="flex flex-row gap-4 items-center md:mb-5 mb-2 md:sticky md:top-32 z-50">
                        <div class="lg:inline-flex hidden flex-row flex-nowrap max-w-[80vw] overflow-x-auto gap-3 square-card px-2 py-[3px] items-center text-neutral-300">
                            <a href="/lookup" class="hover:underline text-nowrap">CRFT Lookup</a>
                            <svg xmlns="http://www.w3.org/2000/svg" class="fill-neutral-300 h-[20px] w-auto" viewBox="0 -960 960 960" width="24px"><path d="m517.85-480-184-184L376-706.15 602.15-480 376-253.85 333.85-296l184-184Z"/></svg>
                            <div class="text-nowrap">{url}</div>
                            <div class="aspect-square h-[5px] rounded-xl bg-neutral-300 mx-2 text-nowrap"></div>
                            <div class="text-nowrap">Generated on {new Date(Astro.url.searchParams.get("datetime").replace(/-(\d{2})$/, ":$1")).toLocaleString('en-US', {
                                month: 'short',
                                day: 'numeric',
                                year: 'numeric',
                                hour: 'numeric',
                                minute: '2-digit',
                                hour12: true
                            }).replace(',', ' at')} UTC</div>
                        </div>
                        <div id="share" class="relative">
                            <div class="square-card px-1 pr-2 py-[3px] flex flex-row gap-1 text-neutral-300 items-center transition-all hover:bg-neutral-700 lg:mt-0 mt-20 cursor-pointer">
                                <div class="w-[24px] flex flex-row gap-1">
                                    <svg id="share-icon" class="h-5 fill-neutral-300" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M680-80q-50 0-85-35t-35-85q0-6 3-28L282-392q-16 15-37 23.5t-45 8.5q-50 0-85-35t-35-85q0-50 35-85t85-35q24 0 45 8.5t37 23.5l281-164q-2-7-2.5-13.5T560-760q0-50 35-85t85-35q50 0 85 35t35 85q0 50-35 85t-85 35q-24 0-45-8.5T598-672L317-508q2 7 2.5 13.5t.5 14.5q0 8-.5 14.5T317-452l281 164q16-15 37-23.5t45-8.5q50 0 85 35t35 85q0 50-35 85t-85 35Z"/></svg>
                                    <svg id="check-icon" class="hidden fill-neutral-300" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"/></svg>
                                </div>
                                <div>Share</div>
                            </div>
                            <div id="shareDialog" class="square-card mb-5 w-[300px] hidden flex-col gap-4 absolute top-12 transition-all z-20">
                                <div>Share via</div>
                                <div class="flex flex-row gap-2 flex-wrap">
                                    <button id="x" class="square-card w-10 h-10 p-2.5 transition-all hover:bg-neutral-700">
                                        <svg class="w-full" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 1227"><path fill="#FFFFFF" d="M714.163 519.284 1160.89 0h-105.86L667.137 450.887 357.328 0H0l468.492 681.821L0 1226.37h105.866l409.625-476.152 327.181 476.152H1200L714.137 519.284h.026ZM569.165 687.828l-47.468-67.894-377.686-540.24h162.604l304.797 435.991 47.468 67.894 396.2 566.721H892.476L569.165 687.854v-.026Z"/></svg>
                                    </button>
                                    <button id="reddit" class="square-card w-10 h-10 p-2.5 transition-all hover:bg-neutral-700">
                                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 2500 2500" style="enable-background:new 0 0 2500 2500;" xml:space="preserve">
                                        <style type="text/css">
                                           	.st0{fill:currentColor;}
                                                                                    </style>
                                                                                    <path class="st0" d="M2398.7,1254.2c0.3,23.6-2.6,47.2-8.8,69.9c-6.2,22.8-15.6,44.6-27.9,64.8c-12.3,20.2-27.4,38.5-44.8,54.5
                                           	c-17.4,16-37,29.4-58.1,39.9c0.5,6.3,0.9,12.6,1.1,19c0.5,12.6,0.5,25.3,0,37.9c-0.2,6.3-0.6,12.7-1.1,19
                                           	c0,385.9-449.7,699.5-1004.5,699.5S250.3,1945.1,250.3,1559.1c-0.5-6.3-0.9-12.6-1.1-19c-0.5-12.6-0.5-25.3,0-37.9
                                           	c0.2-6.3,0.6-12.7,1.1-19c-67.1-30.8-117.2-89.5-137.2-160.6c-19.9-71.1-7.7-147.3,33.6-208.6c41.2-61.2,107.3-101.2,180.6-109.4
                                           	c73.4-8.2,146.6,16.2,200.4,66.8c49.3-33.4,101-63.2,154.6-89.2c53.6-25.9,109.1-48,165.9-65.9c56.8-17.9,114.9-31.7,173.7-41.2
                                           	s118.2-14.7,177.8-15.6l127.5-597.8c1.4-6.9,4.2-13.5,8.2-19.3c4-5.8,9.1-10.8,15-14.6c5.9-3.8,12.6-6.5,19.6-7.8
                                           	c6.9-1.2,14.1-1.1,21,0.4l422.1,84.4c42.6-73.2,132-104.5,211-74c79,30.5,124.1,113.8,106.4,196.6
                                           	c-17.6,82.8-92.8,140.5-177.3,136.2c-84.6-4.4-153.4-69.5-162.5-153.6l-368.7-77.5l-112,537.5c58.8,1.2,117.5,6.8,175.6,16.5
                                           	c116.3,19.4,229.1,55.4,335.1,107.1c52.9,25.8,103.9,55.3,152.6,88.4c35-33.6,79-56.4,126.6-65.5c47.7-9.2,96.9-4.4,141.9,13.8
                                           	c45,18.2,83.7,49,111.6,88.8C2381.2,1158.7,2396.9,1205.7,2398.7,1254.2z M688.9,1492.4c8.7,20.9,21.4,39.9,37.4,55.9
                                           	c16,16,35,28.7,55.9,37.4c20.9,8.6,43.3,13.1,65.9,13.1c69.7,0,132.5-42,159.2-106.3c26.7-64.4,11.9-138.5-37.4-187.8
                                           	c-49.3-49.3-123.4-64-187.8-37.4c-64.4,26.7-106.3,89.5-106.3,159.2C675.8,1449.1,680.2,1471.5,688.9,1492.4z M1675.7,1906
                                           	c8.8-8.6,13.9-20.4,14-32.7c0.2-12.4-4.6-24.2-13.2-33.1s-20.4-13.9-32.7-14c-12.4-0.2-24.2,4.6-34.2,12.1
                                           	c-25.9,18.6-53.3,34.9-82,48.9c-28.7,14-58.5,25.5-89.1,34.4c-30.6,8.9-61.9,15.2-93.6,18.9c-31.7,3.7-63.6,4.6-95.4,2.9
                                           	c-31.8,1.4-63.7,0.1-95.2-3.8c-31.6-3.9-62.8-10.6-93.2-19.8c-30.5-9.2-60.1-21-88.6-35.2s-55.7-30.8-81.4-49.7
                                           	c-8.9-7.3-20.2-11.1-31.8-10.5s-22.4,5.4-30.6,13.6c-8.1,8.2-13,19.1-13.6,30.6c-0.6,11.5,3.2,22.9,10.5,31.8
                                           	c30.3,22.8,62.5,43,96.2,60.3c33.7,17.3,68.9,31.7,105.1,42.9c36.2,11.3,73.3,19.4,110.9,24.4c37.6,4.9,75.5,6.6,113.4,5
                                           	c37.9,1.6,75.8-0.1,113.4-5c75.3-9.9,148.4-32.7,216-67.3c33.7-17.3,65.9-37.5,96.2-60.3L1675.7,1906z M1644.1,1612.6
                                           	c23.3,0.3,46.5-4.3,68.1-13.2c21.6-9,41.1-22.3,57.4-39c16.3-16.8,28.9-36.7,37.3-58.5c8.4-21.8,12.2-45.1,11.2-68.4
                                           	c0-69.7-42-132.5-106.3-159.2c-64.4-26.7-138.5-11.9-187.8,37.4c-49.3,49.3-64,123.4-37.4,187.8c26.7,64.4,89.5,106.3,159.2,106.3
                                           	L1644.1,1612.6z"></path>
                                        </svg>
                                    </button>
                                    <button id="linkedin" class="square-card w-10 h-10 p-2.5 transition-all hover:bg-neutral-700">
                                        <svg class="w-full" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path d="M218.123 218.127h-37.931v-59.403c0-14.165-.253-32.4-19.728-32.4-19.756 0-22.779 15.434-22.779 31.369v60.43h-37.93V95.967h36.413v16.694h.51a39.907 39.907 0 0 1 35.928-19.733c38.445 0 45.533 25.288 45.533 58.186l-.016 67.013ZM56.955 79.27c-12.157.002-22.014-9.852-22.016-22.009-.002-12.157 9.851-22.014 22.008-22.016 12.157-.003 22.014 9.851 22.016 22.008A22.013 22.013 0 0 1 56.955 79.27m18.966 138.858H37.95V95.967h37.97v122.16ZM237.033.018H18.89C8.58-.098.125 8.161-.001 18.471v219.053c.122 10.315 8.576 18.582 18.89 18.474h218.144c10.336.128 18.823-8.139 18.966-18.474V18.454c-.147-10.33-8.635-18.588-18.966-18.453" fill="#FFFFFF"/></svg>
                                    </button>
                                    <button id="facebook" class="square-card w-10 h-10 p-2.5 transition-all hover:bg-neutral-700">
                                        <svg aria-hidden="true" role="img" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 28"><path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"></path></svg>                                    </button>
                                    <button id="email" class="square-card w-10 h-10 p-2 transition-all hover:bg-neutral-700">
                                        <svg class="w-full" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" fill="#FFFFFF"><path d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm320-280 320-200v-80L480-520 160-720v80l320 200Z"/></svg>
                                    </button>
                                </div>
                                <div class="h-[1px] bg-neutral-700 w-full"></div>
                                <div class="flex flex-row gap-2 text-sm">
                                    <button id="link" class="w-full square-card px-1 pr-2 py-[3px] flex flex-row gap-2 text-neutral-300 items-center transition-all hover:bg-neutral-700 lg:mt-0 mt-20">
                                        <div class="w-[24px] flex flex-row gap-1">
                                            <svg id="link-icon" class="inline-block fill-neutral-300" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M440-280H280q-83 0-141.5-58.5T80-480q0-83 58.5-141.5T280-680h160v80H280q-50 0-85 35t-35 85q0 50 35 85t85 35h160v80ZM320-440v-80h320v80H320Zm200 160v-80h160q50 0 85-35t35-85q0-50-35-85t-85-35H520v-80h160q83 0 141.5 58.5T880-480q0 83-58.5 141.5T680-280H520Z"/></svg>
                                            <svg id="check-icon" class="hidden fill-neutral-300" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"/></svg>
                                        </div>
                                        <div>Copy Link</div>
                                    </button>
                                    <button id="embed" class="w-full square-card px-1 pr-2 py-[3px] flex flex-row gap-2 text-neutral-300 items-center transition-all hover:bg-neutral-700 lg:mt-0 mt-20">
                                        <div class="w-[24px] flex flex-row gap-1">
                                            <svg class="fill-neutral-300" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M400-360v-200h320v200H400ZM160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm0-80h640v-400H160v400Z"/></svg>
                                            <svg id="check-icon" class="hidden fill-neutral-300" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"/></svg>
                                        </div>
                                        <div>Copy Embed</div>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div>
                            <button id="downloadReport" class="square-card px-1 pr-2 py-[3px] flex flex-row gap-1 text-neutral-300 items-center transition-all hover:bg-neutral-700 lg:mt-0 mt-20 cursor-pointer">
                                <div class="w-[24px] flex flex-row gap-1">
                                <svg class="fill-neutral-300" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M480-320 280-520l56-58 104 104v-326h80v326l104-104 56 58-200 200ZM240-160q-33 0-56.5-23.5T160-240v-120h80v120h480v-120h80v120q0 33-23.5 56.5T720-160H240Z"/></svg>                                </div>
                                <div>Download Report</div>
                            </button>
                        </div>
                    </div>
                    <div class="grid lg:grid-cols-[0.15fr_1fr] gap-5 lg:mt-0 mt-2">
                        <div class="h-full">
                            <div id="sidebar" class="sticky top-44">
                                <div id="toc" class="square-card lg:static sticky top-16 lg:w-auto w-full lg:p-4 px-2 py-1 lg:pt-3 lg:block hidden flex-row overflow-x-auto z-10 transition-all">
                                    <div class="lg:mb-3 text-neutral-400 text-nowrap mr-3">On this report</div>
                                    <div class="flex lg:flex-col flex-row lg:gap-1 gap-3 text-neutral-200">
                                        <a href="#overview" class="toc-link transition hover:text-orange-300">Overview</a>
                                        <a href="#lighthouse" class="toc-link transition hover:text-orange-300">Lighthouse</a>
                                        <a href="#tech-stack" class="toc-link transition hover:text-orange-300 text-nowrap">Tech Stack</a>
                                        <a href="#sitemap" class="toc-link transition hover:text-orange-300 text-nowrap">Sitemap</a>
                                        <a href="#meta-tags" class="toc-link transition hover:text-orange-300 text-nowrap">Meta Tags</a>
                                    </div>
                                </div>
                                <a href="/audit" target="_blank">
                                    <div class="square-card bg-transparent hover:bg-neutral-800 transition-all shadow-md mt-4 text-left">
                                        <div class="mb-1 font-medium text-neutral-50">Get a free hero redesign.</div>
                                        <div class="text-neutral-300 mb-2">We'll personally redesign it to improve its conversion rate.</div>
                                        <div class="text-orange-300">Learn more →</div>
                                    </div>
                                </a>
                            </div>
                        </div>
                        <div>
                            <div class="grid lg:grid-cols-[1fr_0.15fr] gap-4" id="overview">
                                <div>
                                    <div class="square-card p-0 mb-6 w-full aspect-video">
                                        {ogImageUrl ?
                                            <img class="h-full w-full aspect-video object-cover object-center" src={ogImageUrl} alt={`Open Graph Image of ${url}`}>
                                        :
                                            <div class="flex flex-col gap-3 h-full w-full items-center text-center text-pretty justify-center lg:text-lg text-sm font-medium">
                                                <svg class="w-8 h-8 fill-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M480-290.77q13.73 0 23.02-9.29t9.29-23.02q0-13.73-9.29-23.02-9.29-9.28-23.02-9.28t-23.02 9.28q-9.29 9.29-9.29 23.02t9.29 23.02q9.29 9.29 23.02 9.29Zm-30-146.15h60v-240h-60v240ZM480.07-100q-78.84 0-148.21-29.92t-120.68-81.21q-51.31-51.29-81.25-120.63Q100-401.1 100-479.93q0-78.84 29.92-148.21t81.21-120.68q51.29-51.31 120.63-81.25Q401.1-860 479.93-860q78.84 0 148.21 29.92t120.68 81.21q51.31 51.29 81.25 120.63Q860-558.9 860-480.07q0 78.84-29.92 148.21t-81.21 120.68q-51.29 51.31-120.63 81.25Q558.9-100 480.07-100Zm-.07-60q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/></svg>
                                                <div>This URL doesn't have an Open Graph Image set</div>
                                                <a target="_blank" href="https://www.freecodecamp.org/news/what-is-open-graph-and-how-can-i-use-it-for-my-website/" class="secondary-cta rounded-none py-0 px-2 mt-2">Learn more</a>
                                            </div>
                                        }
                                    </div>
                                    <div class="lg:flex lg:flex-row lg:justify-between gap-16">
                                        <div class="lg:max-w-[400px] mb-7">
                                            {ogTitle ?
                                                <div class="text-xl font-medium mb-1 text-pretty">{ogTitle}</div>
                                            :
                                                <div class="text-xl font-medium mb-1 text-pretty text-red-500">Missing meta title</div>
                                            }
                                            { ogDescription ?
                                                <div class="text-lg text-neutral-300 text-pretty">{ogDescription}</div>
                                            :
                                                <div class="text-lg text-red-600 text-pretty">Missing meta description</div>
                                            }
                                        </div>
                                        <div id="mobile-lighthouse"></div>
                                        <div id="tech-overview-container" class="flex flex-row gap-4 justify-start text-neutral-300">
                                            <div class="flex flex-col gap-3">
                                                <div class="w-24 h-5 bg-neutral-600"></div>
                                                <div class="flex flex-row gap-2 items-center">
                                                    <div class="aspect-square h-full bg-neutral-600"></div>
                                                    <div class="md:w-36 w-1/2 h-5 bg-neutral-600"></div>
                                                </div>
                                            </div>
                                            <div class="flex flex-col gap-3">
                                                <div class="w-24 h-5 bg-neutral-600"></div>
                                                <div class="flex flex-row gap-2 items-center">
                                                    <div class="aspect-square h-full bg-neutral-600"></div>
                                                    <div class="md:w-36 w-1/2 h-5 bg-neutral-600"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id="right-sidebar">
                                    <div id="lighthouse-overview" class="square-card p-2 flex flex-col gap-2 mt-6 lg:mt-0 lg:mb-0 mb-8">
                                        <div class="flex justify-start">
                                            <div id="overview-tabs" class="inline-flex flex-row square-card p-[2px] border-[1px] gap-2 text-sm text-nowrap">
                                                <div id="desktop-overview-tab" class="tab-active border-[1px] px-2 py-1 hover:cursor-pointer transition-all">Desktop</div>
                                                <div id="mobile-overview-tab" class="px-2 py-1 border-[1px] hover:cursor-pointer transition-all">Mobile</div>
                                            </div>
                                        </div>
                                        <div id="lighthouse-overview-desktop" class="flex flex-col gap-2">
                                            <div class="square-card p-0">
                                                <div class="bg-neutral-600 text-center">Performance</div>
                                                <div class="text-center text-3xl font-medium">
                                                    <div class="w-20 h-7 bg-neutral-600 my-2 mx-auto"></div>
                                                </div>
                                            </div>
                                            <div class="square-card p-0">
                                                <div class="bg-neutral-600 text-center">Accessibility</div>
                                                <div class="text-center text-3xl font-medium">
                                                    <div class="w-20 h-7 bg-neutral-600 my-2 mx-auto"></div>
                                                </div>
                                            </div>
                                            <div class="square-card p-0">
                                                <div class="bg-neutral-600 text-center">Best Practices</div>
                                                <div class="text-center text-3xl font-medium">
                                                    <div class="w-20 h-7 bg-neutral-600 my-2 mx-auto"></div>
                                                </div>
                                            </div>
                                            <div class="square-card p-0">
                                                <div class="bg-neutral-600 text-center">SEO</div>
                                                <div class="text-center text-3xl font-medium">
                                                    <div class="w-20 h-7 bg-neutral-600 my-2 mx-auto"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="lighthouse-overview-mobile" class="flex flex-col gap-2" hidden>
                                            <div class="square-card p-0">
                                                <div class="bg-neutral-600 text-center">Performance</div>
                                                <div class="text-center text-3xl font-medium">
                                                    <div class="w-20 h-7 bg-neutral-600 my-2 mx-auto"></div>
                                                </div>
                                            </div>
                                            <div class="square-card p-0">
                                                <div class="bg-neutral-600 text-center">Accessibility</div>
                                                <div class="text-center text-3xl font-medium">
                                                    <div class="w-20 h-7 bg-neutral-600 my-2 mx-auto"></div>
                                                </div>
                                            </div>
                                            <div class="square-card p-0">
                                                <div class="bg-neutral-600 text-center">Best Practices</div>
                                                <div class="text-center text-3xl font-medium">
                                                    <div class="w-20 h-7 bg-neutral-600 my-2 mx-auto"></div>
                                                </div>
                                            </div>
                                            <div class="square-card p-0">
                                                <div class="bg-neutral-600 text-center">SEO</div>
                                                <div class="text-center text-3xl font-medium">
                                                    <div class="w-20 h-7 bg-neutral-600 my-2 mx-auto"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-28">
                                <h2 class="text-2xl font-medium mb-2" id="lighthouse">Lighthouse</h2>
                                <div class="text-lg text-neutral-300 text-pretty mb-8 max-w-[700px]">A Lighthouse Score is a comprehensive performance metric generated by Google’s open-source tool, Lighthouse, which analyzes web pages and provides scores across multiple categories to help developers improve their websites’ quality.</div>
                                <div>
                                    <Lighthouse desktopReport={desktopReport} mobileReport={mobileReport}>
                                        <div slot="fallback" class="flex flex-row gap-4 justify-start text-neutral-300">
                                            Error fetching Lighthouse Report
                                        </div>
                                    </Lighthouse>
                                </div>
                            </div>
                            <div class="mt-28">
                                <h2 class="text-2xl font-medium mb-2" id="tech-stack">Tech Stack</h2>
                                <div class="text-lg text-neutral-300 text-pretty mb-8 max-w-[700px]">
                                This is a scan of <span>{url}</span> to determine what technologies it was made with. From analytics tools,
                                to hosting provider, frameworks and more, here's what we found.
                                </div>
                                <Wappalyzer techByCategory={techByCategory}>
                                    <div slot="fallback" class="flex flex-row gap-4 justify-start text-neutral-300">
                                        <div role="status">
                                            <svg aria-hidden="true" class="w-6 h-6 text-gray-200 animate-spin dark:text-gray-600 fill-orange-300" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                                                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                                            </svg>
                                            <span class="sr-only">Loading...</span>
                                        </div>

                                        <div>Fetching tech stack...</div>
                                    </div>
                                </Wappalyzer>
                            </div>
                            <div class="mt-28">
                                <h2 class="text-2xl font-medium mb-2" id="sitemap">Sitemap</h2>
                                <div class="text-lg text-neutral-300 text-pretty mb-8 max-w-[700px]">A visual representation of this website's structure, displayed as an interactive tree diagram. Each node represents a page, with lines connecting parent pages to their children. Large sections can be collapsed and expanded by clicking on nodes with many children.</div>
                                <div class="square-card p-0 bg-[#212121] overflow-x-auto max-sm:w-[calc(100vw-60px)]">
                                    <Sitemap url={url}/>
                                </div>
                            </div>
                            <!-- <div class="mt-28">
                                <h2 class="text-2xl font-medium mb-2">Heat Map</h2>
                                <div class="text-lg text-neutral-300 text-pretty mb-4 max-w-[700px]">
                                This is a simulation that uses color-coded patterns to represent user interaction data on a website. Similar to weather maps showing temperature
                                variations, website heat maps display “hot” areas with high user engagement in warmer colors (reds and oranges) and “cold” areas with lower engagement
                                in cooler colors (blues and greens).
                                </div>
                                <div class="text-lg text-neutral-300 text-pretty mb-8 max-w-[700px]">While we aim for this simulation to be as accurate as possible, we recommend
                                the use of Posthog, our analytics tool of choice, to gather heat maps from your live website visitors.
                                </div>
                            </div> -->
                            <div class="mt-28">
                                <h2 class="text-2xl font-medium mb-2" id="meta-tags">Meta Tags</h2>
                                <div class="text-lg text-neutral-300 text-pretty mb-4 max-w-[700px]">
                                This is what <span>{url}</span> will look like when seen on search engines and shared online through various social media services
                                and messaging platforms.
                                </div>
                                <div class="grid lg:grid-cols-[1fr_1fr] mt-9 gap-14">
                                    <div>
                                        <div class="square-card flex flex-col gap-5 sticky top-44">
                                            <div>
                                                <div class="mb-2">Title</div>
                                                <input id="metaTitle" class="square-card rounded-none p-2 text-neutral-300 mb-2" type="text" value={ogTitle}>
                                                <div><span id="titleLength">{ogTitle?.length || 0}</span> / 60 characters</div>
                                            </div>
                                            <div>
                                                <div class="mb-2">Description</div>
                                                <textarea id="metaDescription" rows="3" cols="33" class="square-card rounded-none p-2 text-neutral-300 mb-1" placeholder="Your SEO meta description here">{ogDescription}</textarea>
                                                <div><span id="descriptionLength">{ogDescription?.length || 0}</span> / 155 characters</div>
                                            </div>
                                            <div>
                                                <div class="mb-2">Image</div>
                                                <div class="square-card p-0 w-full aspect-video">
                                                    {ogImageUrl ?
                                                        <img class="h-full w-full aspect-video object-cover object-center" src={ogImageUrl} alt={`Open Graph Image of ${url}`}>
                                                    :
                                                        <div class="flex flex-col gap-3 h-full w-full text-center text-pretty items-center justify-center text-lg font-medium">
                                                            <svg class="w-8 h-8 fill-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M480-290.77q13.73 0 23.02-9.29t9.29-23.02q0-13.73-9.29-23.02-9.29-9.28-23.02-9.28t-23.02 9.28q-9.29 9.29-9.29 23.02t9.29 23.02q9.29 9.29 23.02 9.29Zm-30-146.15h60v-240h-60v240ZM480.07-100q-78.84 0-148.21-29.92t-120.68-81.21q-51.31-51.29-81.25-120.63Q100-401.1 100-479.93q0-78.84 29.92-148.21t81.21-120.68q51.29-51.31 120.63-81.25Q401.1-860 479.93-860q78.84 0 148.21 29.92t120.68 81.21q51.31 51.29 81.25 120.63Q860-558.9 860-480.07q0 78.84-29.92 148.21t-81.21 120.68q-51.29 51.31-120.63 81.25Q558.9-100 480.07-100Zm-.07-60q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/></svg>
                                                            <div>This URL doesn't have an Open Graph Image set</div>
                                                            <a target="_blank" href="https://www.freecodecamp.org/news/what-is-open-graph-and-how-can-i-use-it-for-my-website/" class="secondary-cta rounded-none py-0 px-2 mt-2">Learn more</a>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="flex flex-col gap-8">
                                            <div class="flex flex-col gap-5">
                                                <h3 class="text-xl font-medium">Search engines</h3>
                                                <div>
                                                    <h4 class="text-lg mb-2 font-medium">Google</h4>
                                                    <div class="text-blue-300 font-medium text-lg meta-title-preview">{ogTitle}</div>
                                                    <div class="text-green-500 mb-1">{url}</div>
                                                    <div class="text-neutral-300 meta-description-preview">{ogDescription}</div>
                                                </div>
                                            </div>
                                            <div class="flex flex-col gap-5">
                                                <h3 class="text-xl font-medium">Social Media Platforms</h3>
                                                <div>
                                                    <h4 class="text-lg mb-3 font-medium">Instagram DM</h4>
                                                    <div class="rounded-2xl rounded-br-md bg-neutral-800 max-w-[300px] overflow-hidden">
                                                        <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} alt="">
                                                        <div class="p-3">
                                                            <div class="font-medium text-lg leading-tight mb-[6px] meta-title-preview">{ogTitle}</div>
                                                            <div class="text-neutral-300 leading-tight meta-description-preview">{ogDescription}</div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div>
                                                    <h4 class="text-lg mb-3 font-medium">X (formerly Twitter)</h4>
                                                    <div class="rounded-xl border border-neutral-700 relative overflow-hidden">
                                                        <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} alt="">
                                                        <div class="p-1 px-2 text-sm bg-neutral-950/80 inline-block absolute bottom-0 mb-2 ml-2 rounded-md meta-title-preview">{ogTitle}</div>
                                                    </div>
                                                </div>
                                                <div>
                                                    <h4 class="text-lg mb-3 font-medium">Facebook</h4>
                                                    <div class="bg-[#333334] overflow-hidden">
                                                        <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} alt="">
                                                        <div class="p-3 relative">
                                                            <div class="w-7 h-7 flex flex-row items-center justify-center rounded-full bg-neutral-800 border border-neutral-700 absolute -top-[15px] right-0 mr-6 text-xl">𝒊</div>
                                                            <div class="text-neutral-300 leading-tight mb-[6px] uppercase">{url.replace(/^https?:\/\//i, '').split('/')[0]}</div>
                                                            <div class="font-medium text-lg leading-tight mb-[6px] meta-title-preview">{ogTitle}</div>
                                                            <div class="text-neutral-300 leading-tight meta-description-preview">{ogDescription}</div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div>
                                                    <h4 class="text-lg mb-3 font-medium">LinkedIn</h4>
                                                    <div class="bg-[#2A3138] overflow-hidden border-0">
                                                        <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} class="w-full" alt="">
                                                        <div class="p-3 relative">
                                                            <div class="font-semibold leading-tight mb-[6px] meta-title-preview">{ogTitle}</div>
                                                            <div class="leading-tight text-neutral-400">{url.replace(/^https?:\/\//i, '').split('/')[0]}</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="flex flex-col gap-5">
                                                <h3 class="text-xl font-medium">Messaging Platforms</h3>
                                                <div>
                                                    <h4 class="text-lg mb-3 font-medium">WhatsApp</h4>
                                                    <div class="rounded-xl rounded-tr-[0px] p-1 bg-[#154E38] max-w-[400px] relative">
                                                        <div class="rounded-lg bg-[#124332] overflow-hidden">
                                                            <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} alt="">
                                                            <div class="p-4 pt-3">
                                                                <div class="text-lg font-medium leading-tight mb-[6px] meta-title-preview">{ogTitle}</div>
                                                                <div class="text-neutral-300 leading-tight meta-description-preview">{ogDescription}</div>
                                                            </div>
                                                            <div class="absolute -z-10  top-0 -right-3">
                                                                <svg width="20.026595px" height="25px" viewBox="0 0 10.026595 15" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                                                    <g id="New-website-(astro)" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                                        <g id="CRFT-Lookup---Report" transform="translate(-823, -996)" fill="#144E38">
                                                                            <path d="M823,996 L832.026595,996 C832.57888,996 833.026595,996.447715 833.026595,997 C833.026595,997.212693 832.958779,997.419847 832.833,997.591364 L823,1011 L823,1011 L823,996 Z" id="Rectangle"></path>
                                                                        </g>
                                                                    </g>
                                                                </svg>
                                                            </div>
                                                        </div>
                                                        <div class="text-blue-300 text-lg underline p-2">{url}</div>
                                                    </div>
                                                </div>
                                                <div>
                                                    <h4 class="text-lg mb-3 font-medium">Telegram</h4>
                                                    <div class="rounded-2xl rounded-br-[0px] p-3 pb-1 bg-gradient-to-b from-[#7F47C0] to-[#676AEF] relative max-w-[400px]">
                                                        <div class="mb-2 text-xl underline">{url}</div>
                                                        <div class="rounded-xl overflow-hidden bg-white/10 mb-1">
                                                            <div class="border-l-4 border-neutral-50 p-2">
                                                                <div class="font-semibold">{url.replace(/^https?:\/\//i, '').split('/')[0]}</div>
                                                                <div class="font-semibold meta-title-preview">{ogTitle}</div>
                                                                <div class="text-neutral-100 leading-snug font-medium meta-description-preview">{ogDescription}</div>
                                                                <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} class="rounded-xl overflow-hidden mt-3" alt="">
                                                            </div>
                                                        </div>
                                                        <div class="flex flex-row gap-2 items-center justify-end">
                                                            <div class="text-right">9:21 AM</div>
                                                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#FFFFFF"><path d="M268-240 42-466l57-56 170 170 56 56-57 56Zm226 0L268-466l56-57 170 170 368-368 56 57-424 424Zm0-226-57-56 198-198 57 56-198 198Z"/></svg>
                                                        </div>
                                                        <div class="absolute bottom-0 -right-4">
                                                            <svg width="16.8920714px" height="37.7101289px" viewBox="0 0 16.8920714 37.7101289" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                                                <g id="New-website-(astro)" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                                    <path d="M0,0 C0.206630843,19.5610532 5.83732133,31.029065 16.8920714,34.4040354 L15.6006287,37.7101289 L0,37.7101289 L0,0 Z" id="Path-2" fill="#6869ED"></path>
                                                                </g>
                                                            </svg>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div>
                                                    <h4 class="text-lg mb-3 font-medium">Signal</h4>
                                                    <div class="rounded-2xl rounded-br-sm bg-[#2E2E2E] max-w-[300px] overflow-hidden">
                                                        <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} alt="">
                                                        <div class="p-3">
                                                            <div class="text-sm font-medium leading-tight mb-[6px] meta-title-preview">{ogTitle}</div>
                                                            <div class="text-sm text-neutral-300 leading-tight meta-description-preview">{ogDescription}</div>
                                                        </div>
                                                        <div class="p-3 bg-[#2166EE]">
                                                            <div class="leading-tight">{url}</div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div>
                                                    <h4 class="text-lg mb-2 font-medium">Discord</h4>
                                                    <div class="text-blue-300 mb-1">{url}</div>
                                                    <div class="overflow-hidden">
                                                        <div class="border-l-4 border-neutral-600 bg-[#2B2D31] rounded-md p-3">
                                                            <div class="text-blue-300 font-medium mb-2 meta-title-preview">{ogTitle}</div>
                                                            <div class="text-neutral-300 leading-snug meta-description-preview">{ogDescription}</div>
                                                            <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} class="rounded-md overflow-hidden mt-3" alt="">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div>
                                                    <h4 class="text-lg mb-2 font-medium">Slack</h4>
                                                    <div class="text-[#1D9BD1] mb-2">{url}</div>
                                                    <div class="flex flex-row gap-4">
                                                        <div class="w-1 h-auto rounded-xl bg-neutral-600 shrink-0"></div>
                                                        <div>
                                                            <div class="font-semibold mb-1">{url.replace(/^https?:\/\//i, '').split('/')[0]}</div>
                                                            <div class="text-[#1D9BD1] font-medium mb-1 meta-title-preview">{ogTitle}</div>
                                                            <div class="text-neutral-300 leading-snug meta-description-preview">{ogDescription}</div>
                                                            <img class="aspect-video w-full bg-neutral-500 object-cover object-center" src={ogImageUrl} class="rounded-md overflow-hidden mt-3" alt="">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div>
                                                    <h4 class="text-lg mb-3 font-medium">Facebook Messenger</h4>
                                                    <div class="rounded-xl overflow-auto max-w-[300px]">
                                                        <div class="p-3 py-2 bg-[#6B78FF]">
                                                            <div class="underline">{url}</div>
                                                        </div>
                                                        <img class="aspect-video object-cover object-center" src={ogImageUrl} class="w-full" alt="">
                                                        <div class="p-3 bg-[#333334]">
                                                            <div class="font-medium meta-title-preview">{ogTitle}</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </section>
        <Footer/>
    </body>
</html>
