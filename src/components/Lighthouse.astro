---
export const prerender = false;
const PAGESPEED_API = import.meta.env.PAGESPEED_API;

const {url} = Astro.props;

let desktopReport = null;
let mobileReport = null;

if (url) {
    console.log(`Starting PageSpeed analysis for URL: ${url}`);
    try {
        const encodedUrl = encodeURIComponent(url);
        console.log(`Encoded URL: ${encodedUrl}`);

        // Run both requests in parallel
        const [desktopResponse, mobileResponse] = await Promise.all([
            fetch(
                `https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${encodedUrl}&category=performance&category=best-practices&category=seo&category=accessibility&strategy=desktop&locale=en&key=${PAGESPEED_API}`
            ),
            fetch(
                `https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${encodedUrl}&category=performance&category=best-practices&category=seo&category=accessibility&strategy=mobile&locale=en&key=${PAGESPEED_API}`
            )
        ]);

        if (!desktopResponse.ok) {
            console.error(`Desktop API response not OK. Status: ${desktopResponse.status}`);
            throw new Error(`HTTP error! status: ${desktopResponse.status}`);
        }

        if (!mobileResponse.ok) {
            console.error(`Mobile API response not OK. Status: ${mobileResponse.status}`);
            throw new Error(`HTTP error! status: ${mobileResponse.status}`);
        }

        console.log('Successfully received PageSpeed API responses');
        desktopReport = await desktopResponse.json();
        mobileReport = await mobileResponse.json();
        console.log('Successfully parsed JSON responses');
    } catch (error) {
        console.error("Error fetching PageSpeed data:", error);
        console.error("Stack trace:", error.stack);
    }
};
---
<div>
    <div class="flex justify-start mb-4">
        <div id="lighthouse-tabs" class="inline-flex flex-row square-card p-[2px] border-[1px] gap-2 text-sm text-nowrap">
            <div id="desktop-tab" class="tab-active border-[1px] px-2 py-1 hover:cursor-pointer transition-all">Desktop</div>
            <div id="mobile-tab" class="px-2 py-1 border-[1px] hover:cursor-pointer transition-all">Mobile</div>
        </div>
    </div>

    <div id="lighthouse-viewer-desktop" class="lighthouse-viewer square-card p-0 bg-[#212121] overflow-x-auto max-sm:w-[calc(100vw-60px)]">
        {!desktopReport &&
            <div class="flex flex-row gap-4 justify-start text-neutral-300">
                Error fetching desktop report
            </div>
        }
    </div>

    <div id="lighthouse-viewer-mobile" class="lighthouse-viewer square-card p-0 bg-[#212121] overflow-x-auto max-sm:w-[calc(100vw-60px)]" hidden>
        {!mobileReport &&
            <div class="flex flex-row gap-4 justify-start text-neutral-300">
                Error fetching mobile report
            </div>
        }
    </div>

    {desktopReport && <span id="desktop-report" hidden>{JSON.stringify(desktopReport.lighthouseResult)}</span>}
    {mobileReport && <span id="mobile-report" hidden>{JSON.stringify(mobileReport.lighthouseResult)}</span>}
</div>

<style>
@reference "../styles/global.css";
    #lighthouse-tabs div {
        @apply border-transparent;
    }
    .tab-active {
        border-color: #525252 !important;
        @apply bg-neutral-700;
    }

    /* Ensure the hidden attribute works */
    [hidden] {
        display: none;
    }
</style>

<script>
    import $ from 'jquery';
    import { renderReport } from 'lighthouse-viewer';

    $(() => {
        // Tab switching logic
        $("#lighthouse-tabs div").click(function() {
            if ($(this).hasClass("tab-active")) return;
            $("#lighthouse-tabs .tab-active").removeClass("tab-active");
            $(this).addClass("tab-active");
            const tabId = $(this).attr("id");
            if (tabId === "desktop-tab") {
                $("#lighthouse-viewer-desktop").removeAttr("hidden");
                $("#lighthouse-viewer-mobile").attr("hidden", "hidden");
            } else {
                $("#lighthouse-viewer-mobile").removeAttr("hidden");
                $("#lighthouse-viewer-desktop").attr("hidden", "hidden");
            }
        });

        // Function to render a report with error handling
        function renderLighthouseReport(data, viewerId, reportType) {
            try {
                console.log(`Rendering ${reportType} report...`);
                const viewer = document.querySelector(`#${viewerId}`);
                if (!viewer) {
                    console.error(`Viewer element #${viewerId} not found`);
                    return;
                }
                const reportHtml = renderReport(data, {});
                viewer.appendChild(reportHtml);
                console.log(`${reportType} report rendered successfully`);

                // Adjust styles after rendering
                setTimeout(() => {
                    try {
                        const $viewer = $(`#${viewerId}`);
                        const stickyHeader = $viewer.find('.lh-sticky-header');
                        const topbar = $viewer.find('.lh-topbar');
                        const filmstrip = $viewer.find('.lh-filmstrip');

                        if (stickyHeader.length) stickyHeader.css("position", "static");
                        if (topbar.length) topbar.css("position", "static");
                        if (filmstrip.length) filmstrip.css("overflow", "hidden");
                        console.log(`${reportType} report styles adjusted`);
                    } catch (styleError) {
                        console.error(`Error adjusting styles for ${reportType} report:`, styleError);
                    }
                }, 100);
            } catch (error) {
                console.error(`Error rendering ${reportType} report:`, error);
                const viewer = document.querySelector(`#${viewerId}`);
                if (viewer) {
                    viewer.innerHTML = `<div class="text-neutral-300">Failed to render ${reportType} report. Please try again later.</div>`;
                }
            }
        }

        // Render desktop report
        if ($("#desktop-report").length) {
            try {
                const desktopData = JSON.parse($("#desktop-report").text());
                renderLighthouseReport(desktopData, 'lighthouse-viewer-desktop', 'Desktop');
            } catch (parseError) {
                console.error("Error parsing desktop report data:", parseError);
                $("#lighthouse-viewer-desktop").html('<div class="text-neutral-300">Failed to load Desktop report data.</div>');
            }
        }

        // Render mobile report
        if ($("#mobile-report").length) {
            try {
                const mobileData = JSON.parse($("#mobile-report").text());
                renderLighthouseReport(mobileData, 'lighthouse-viewer-mobile', 'Mobile');
            } catch (parseError) {
                console.error("Error parsing mobile report data:", parseError);
                $("#lighthouse-viewer-mobile").html('<div class="text-neutral-300">Failed to load Mobile report data.</div>');
            }
        }

        // Signal that rendering is complete
        console.log("Lighthouse rendering complete");
        $(document).trigger('lighthouse:rendered');
    });
</script>
