---
export const prerender = false;
const { url } = Astro.props;

console.log("[Wappalyzer] component is being executed");
console.log("[Wappalyzer] URL received in component:", url);

let techByCategory = {};

if (!url) {
  console.log("[Wappalyzer] No URL provided to component");
} else {
  try {
    console.log("[Wappalyzer] Starting to process URL:", url);

    const wappalyzerServiceUrl = process.env.WAPPALYZER_URL || import.meta.env.WAPPALYZER_URL;
    const apiKey = process.env.WAPPALYZER_API || import.meta.env.WAPPALYZER_API;

    console.log("[Wappalyzer] Service URL:", wappalyzerServiceUrl);
    console.log("[Wappalyzer] API Key present:", !!apiKey);
    console.log("[Wappalyzer] API Key (first 10 chars):", apiKey ? apiKey.substring(0, 10) + '...' : 'undefined');

    if (!apiKey) {
      console.error("[Wappalyzer] No API key found in environment variables");
    }

    if (!wappalyzerServiceUrl) {
      console.error("[Wappalyzer] No service URL found in environment variables");
    }

    console.log("[Wappalyzer] Making request to external service:", wappalyzerServiceUrl);
    console.log("[Wappalyzer] Request payload:", { url, options: {} });

    const response = await fetch(wappalyzerServiceUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-API-Key': apiKey
      },
      body: JSON.stringify({
        url,
        options: {
          // You can add any optional Wappalyzer options here
          // For example:
          // delay: 500,
          // maxWait: 30000
        }
      })
    });

    console.log("[Wappalyzer] Response received - status:", response.status);
    console.log("[Wappalyzer] Response headers:", Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error("[Wappalyzer] Error response body:", errorText);
      throw new Error(`Error from Wappalyzer service: ${response.status} - ${errorText}`);
    }

    const results = await response.json();
    console.log("[Wappalyzer] Raw results from external service:", results);
    console.log("[Wappalyzer] Technologies found:", results?.technologies?.length || 0);

    if (results && results.technologies) {
      console.log("[Wappalyzer] Processing technologies into categories");

      techByCategory = results.technologies.reduce((acc, tech) => {
        console.log("[Wappalyzer] Processing tech:", tech.name);

        if (tech.categories) {
          console.log("[Wappalyzer] Tech categories:", tech.categories.map(cat => cat.name));

          tech.categories.forEach(cat => {
            if (!acc[cat.name]) {
              acc[cat.name] = [];
              console.log("[Wappalyzer] Created new category:", cat.name);
            }
            acc[cat.name].push({
              name: tech.name,
              description: tech.description,
              website: tech.website,
              icon: tech.icon,
            });
            console.log("[Wappalyzer] Added tech to category:", cat.name, "->", tech.name);
          });
        } else {
          console.log("[Wappalyzer] Tech has no categories:", tech.name);
        }
        return acc;
      }, {});

      console.log("[Wappalyzer] Final techByCategory structure:", Object.keys(techByCategory));
      console.log("[Wappalyzer] Total categories:", Object.keys(techByCategory).length);
    } else {
      console.log("[Wappalyzer] No technologies found in results");
    }
  } catch (error) {
    console.error("[Wappalyzer] Error in component:", error);
    console.error("[Wappalyzer] Error stack:", error.stack);
  }
}

console.log("[Wappalyzer] Component processing complete. Final data:", techByCategory);
---

<div class="flex flex-col gap-8" id="wappalyzer-tech-data">
    {Object.entries(techByCategory).length > 0 ? (
        Object.entries(techByCategory).map(([category, techs]) => (
            <div data-category={category}>
                <h3 class="text-xl font-medium mb-4">{category}</h3>
                <div class="grid lg:grid-cols-2 gap-4">
                    {techs.map((tech) => (
                        <a href={`${tech.website}?utm_source=crftLookup`} target="_blank" id={tech.categories?.[0]?.slug} class="flex flex-col gap-2 square-card p-4 relative hover:bg-neutral-700 transition-all" data-tech-name={tech.name} data-tech-icon={tech.icon}>
                            <div id={tech.slug} class="flex flex-row gap-2 items-center">
                                <img src={`/icons/${tech.icon}`} class="w-5 h-5" alt="" />
                                <div>{tech.name}</div>
                            </div>
                            <div class="text-pretty">{tech.description}</div>
                            <svg class="absolute top-0 right-0 mt-3 mr-3" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="m216-160-56-56 464-464H360v-80h400v400h-80v-264L216-160Z"/></svg>
                        </a>
                    ))}
                </div>
            </div>
        ))
    ) : (
        <div class="text-neutral-300">No technology data available</div>
    )}
</div>
